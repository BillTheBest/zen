;; (C) 2011 Pierre-Yves Baccou

;; consider a read macro 'seqnum' expanding to '(nil) sequence-number'

(eval-when (:compile-toplevel :load-toplevel :execute)
;
(require "util" "util/util")
;
(enable-braces '(nil nil))
);

(defmacro interpret-replies (&rest protos)
  (cons 'progn
	(mapcar #'(lambda (proto)
		    `(deftranslator/reply ,(first proto) ,@(rest proto)))
		protos)))

(interpret-replies
;
(:GetWindowAttributes
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :NotUseful)
		  (1 . :WhenMapped)
		  (2 . :Always)))
     backing-store))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (VISUALID visual))
 (2 ((ENUM CARD16 ((1 . :InputOutput)
		   (2 . :InputOnly)))
     class))
 (1 ((ENUM CARD8 ((0 . :Forget)
		  (1 . :NorthWest)
		  (2 . :North)
		  (3 . :NorthEast)
		  (4 . :West)
		  (5 . :Center)
		  (6 . :East)
		  (7 . :SouthWest)
		  (8 . :South)
		  (9 . :SouthEast)
		  (10 . :Static)))
     bit-gravity))
 (1 ((ENUM CARD8 ((0 . :Unmap)
		  (1 . :NorthWest)
		  (2 . :North)
		  (3 . :NorthEast)
		  (4 . :West)
		  (5 . :Center)
		  (6 . :East)
		  (7 . :SouthWest)
		  (8 . :South)
		  (9 . :SouthEast)
		  (10 . :Static)))
     win-gravity))
 (4 (CARD32 backing-planes))
 (4 (CARD32 backing-pixel))
 (1 (BOOL save-under))
 (1 (BOOL map-is-installed))
 (1 ((ENUM CARD8 ((0 . :Unmapped)
		  (1 . :Unviewable)
		  (2 . :Viewable)))
     map-state))
 (1 (BOOL override-redirect))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 COLORMAP)
     colormap))
 (4 (SETofEVENT all-event-masks))
 (4 (SETofEVENT your-event-mask))
 (2 (SETofEVENT/16 do-not-propagate-mask))
 (2 {unused}))

(:GetGeometry
 (1 {reply} 1)
 (1 (CARD8 depth))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (WINDOW root))
 (2 (INT16 x))
 (2 (INT16 y))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (2 (CARD16 border-width))
 (10 {unused}))

(:QueryTree
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (WINDOW root))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     parent))
 (2 (COUNT16 (length children)))
 (14 {unused})
 (nil ((list WINDOW) children)))

(:InternAtom
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 ATOM)
     atom))
 (20 {unused}))

(:GetAtomName
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length name)))
 (22 {unused})
 (nil (STRING8 name :as n))
 ((pad n) {unused}))

(:GetProperty
 (1 {reply} 1)
 (1 (CARD8 format))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 ATOM)
     type))
 (4 (CARD32 bytes-after))
 (4 (COUNT32 (if (= 0 format)
		 format 
		 (/ (length value)
		    (/ format 8)))))  ; length of value in format units))
 (12 {unused})
 (nil (VECTOR value :as n)) ; see GetProperty implementation for how it's built
 ((pad n) {unused}))

;; (nil ((list (fn #.(lambda (endian val format) ; slow ! and will it be allowed ?
;;		     (ecase format
;;		       (8 (funcall (encoder :CARD8) endian val))
;;		       (16 (funcall (encoder :CARD16) endian val))
;;		       (32 (funcall (encoder :CARD32) endian val))))))
;;       value :as n))

(:ListProperties
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length atoms))) ; (2 (n number of ATOMs in atoms)) 
 (22 {unused})
 (nil ((list ATOM) atoms)))

(:GetSelectionOwner
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     owner))
 (20 {unused}))

(:GrabPointer
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :Success)
		  (1 . :AlreadyGrabbed)
		  (2 . :InvalidTime)
		  (3 . :NotViewable)
		  (4 . :Frozen)))
     status)) 
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused}))

(:GrabKeyboard
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :Success)
		  (1 . :AlreadyGrabbed)
		  (2 . :InvalidTime)
		  (3 . :NotViewable)
		  (4 . :Frozen)))
     status))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused}))

(:QueryPointer
 (1 {reply} 1)
 (1 (BOOL same-screen))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (WINDOW root))
 (4 ((or (ENUM CARD32 ((0 . nil)))
 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 win-x))
 (2 (INT16 win-y))
 (2 (#.SETofKEYMASK mask)) 
 (6 {unused}))

(:GetMotionEvents
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (COUNT32 (length events))) ; (4 (n number of TIMECOORDs in events)) ;
 (20 {unused})
 (nil ((list TIMECOORD) events)))
;;
;; TIMECOORD)
;; (4 (TIMESTAMP time))
;; (2 (INT16 x))
;; (2 (INT16 y))

(:TranslateCoordinates 
 (1 {reply} 1)
 (1 (BOOL same-screen))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 dst-x))
 (2 (INT16 dst-y))
 (16 {unused}))

(:GetInputFocus
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . nil)
		  (1 . :PointerRoot)
		  (2 . :Parent)))
     revert-to))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 ((or (ENUM CARD32 ((0 . nil)
		       (1 . :PointerRoot)))
	 WINDOW)
     focus))
 (20 {unused}))

(:QueryKeymap
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (32 ((list CARD8) keys)))

(:QueryFont
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (12 (CHARINFO min-bounds))
 (4 {unused})
 (12 (CHARINFO max-bounds))
 (4 {unused})
 (2 (CARD16 min-char-or-byte2))
 (2 (CARD16 max-char-or-byte2))
 (2 (CARD16 default-char))
 (2 (COUNT16 (length properties))) ; (2 (n number of FONTPROPs in properties)) 
 (1 ((ENUM CARD8 ((0 . :LeftToRight)
		  (1 . :RightToLeft)))
     draw-direction))
 (1 (CARD8 min-byte1))
 (1 (CARD8 max-byte1))
 (1 (BOOL all-chars-exist))
 (2 (INT16 font-ascent))
 (2 (INT16 font-descent))
 (4 (COUNT32 (length char-infos)))  ; (4 (m number of CHARINFOs in char-infos)) ;
 (nil ((list FONTPROP) properties))
 (nil ((list CHARINFO) char-infos)))

(:QueryTextExtents
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :LeftToRight)
		  (1 . :RightToLeft)))
     draw-direction))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (INT16 font-ascent))
 (2 (INT16 font-descent))
 (2 (INT16 overall-ascent))
 (2 (INT16 overall-descent))
 (4 (INT32 overall-width))
 (4 (INT32 overall-left))
 (4 (INT32 overall-right))
 (4 {unused}))

(:ListFonts
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length names)))  ; (2 (CARD16 number of STRs in names))
 (22 {unused})
 (nil ((list STR) names :as n))
 ((pad n) {unused}))

;; LisFontsWithInfo can send multiple replies ! Note the 2nd reply type is a special case of this one with an empty name.
(:ListFontsWithInfo
 (1 {reply} 1)
 (1 (COUNT8 (length name))) ; (n length of name in bytes))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (12 (CHARINFO min-bounds))
 (4 {unused})
 (12 (CHARINFO max-bounds))
 (4 {unused})
 (2 (CARD16 min-char-or-byte2))
 (2 (CARD16 max-char-or-byte2))
 (2 (CARD16 default-char))
 (2 (COUNT16 (length properties))) ; (2 (m number of FONTPROPs in properties)) ;
 (1 ((ENUM CARD8 ((0 . :LeftToRight)
		  (1 . :RightToLeft)))
     draw-direction))
 (1 (CARD8 min-byte1))
 (1 (CARD8 max-byte1))
 (1 (BOOL all-chars-exist))
 (2 (INT16 font-ascent))
 (2 (INT16 font-descent))
 (4 (CARD32 replies-hint))
 (nil ((list FONTPROP) properties)) ;
 (nil (STRING8 name :as n))
 ((pad n) {unused}))

;;
;; FONTPROP)
;; (encodings are the same as for QueryFont)
;;
;; CHARINFO)
;; (encodings are the same as for QueryFont)

;;  (last in series) : 

(:GetFontPath
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length path))) ; (2 (CARD16 number of STRs in path)) 
 (22 {unused})
 (nil ((list STR) path :as n))
 ((pad n) {unused}))

(:GetImage
 (1 {reply} 1)
 (1 (CARD8 depth))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 VISUALID)
     visual))
 (20 {unused})
 (nil (VECTOR data :as n))
 ((pad n) {unused}))

(:ListInstalledColormaps
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length cmaps))) ; (2 (n number of COLORMAPs in cmaps))
 (22 {unused})
 (nil ((list COLORMAP) cmaps)))

(:AllocColor
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (CARD16 red))
 (2 (CARD16 green))
 (2 (CARD16 blue))
 (2 {unused})
 (4 (CARD32 pixel))
 (12 {unused}))

(:AllocNamedColor
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (CARD32 pixel))
 (2 (CARD16 exact-red))
 (2 (CARD16 exact-green))
 (2 (CARD16 exact-blue))
 (2 (CARD16 visual-red))
 (2 (CARD16 visual-green))
 (2 (CARD16 visual-blue))
 (8 {unused}))

(:AllocColorCells
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length pixels))) ; (2 (n number of CARD32s in pixels))
 (2 (COUNT16 (length masks))) ; (2 (m number of CARD32s in masks)) 
 (20 {unused})
 (nil ((list CARD32) pixels))
 (nil ((list CARD32) masks)))

(:AllocColorPlanes
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length pixels))) ; (2 (n number of CARD32s in pixels)) 
 (2 {unused})
 (4 (CARD32 red-mask))
 (4 (CARD32 green-mask))
 (4 (CARD32 blue-mask))
 (8 {unused})
 (nil ((list CARD32) pixels)))

(:QueryColors
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length colors))) ; (2 (n number of RGBs in colors)) 
 (22 {unused})
 (nil ((list RGB) colors)))

(:LookupColor
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (CARD16 exact-red))
 (2 (CARD16 exact-green))
 (2 (CARD16 exact-blue))
 (2 (CARD16 visual-red))
 (2 (CARD16 visual-green))
 (2 (CARD16 visual-blue))
 (12 {unused}))

(:QueryBestSize
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (CARD16 width))
 (2 (CARD16 height))
 (20 {unused}))

(:QueryExtension
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (1 (BOOL present))
 (1 (CARD8 major-opcode))
 (1 (CARD8 first-event))
 (1 (CARD8 first-error))
 (20 {unused}))

(:ListExtensions
 (1 {reply} 1)
 (1 (COUNT8 (length names))) ; (1 (CARD8 number of STRs in names))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused})
 (nil ((list STR) names :as n))
 ((pad n) {unused}))

(:GetKeyboardMapping
 (1 {reply} 1)
 (1 (COUNT8 keysyms-per-keycode))
 (2 (CARD16 sequence-number))
 (4 {extra-length}) ; (m = count field from the request))
 (24 {unused})
 (nil ((list KEYSYM) keysyms)))

(:GetKeyboardControl
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :Off)
		  (1 . :On)))
     global-auto-repeat))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (CARD32 led-mask))
 (1 (CARD8 key-click-percent))
 (1 (CARD8 bell-percent))
 (2 (CARD16 bell-pitch))
 (2 (CARD16 bell-duration))
 (2 {unused})
 (32 ((list CARD8) auto-repeats)))

(:GetPointerControl
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (CARD16 acceleration-numerator))
 (2 (CARD16 acceleration-denominator))
 (2 (CARD16 threshold))
 (18 {unused}))

(:GetScreenSaver
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (CARD16 timeout))
 (2 (CARD16 interval))
 (1 ((ENUM CARD8 ((0 . :No)
		  (1 . :Yes)))
     prefer-blanking))
 (1 ((ENUM CARD8 ((0 . :No)
		  (1 . :Yes)))
     allow-exposures))
 (18 {unused}))

(:ListHosts
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :Disabled)
		  (1 . :Enabled)))
     mode))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (2 (COUNT16 (length hosts))) ; (2 (CARD16 number of HOSTs in hosts))
 (22 {unused})
 (nil ((list HOST) hosts))) ; (n always a multiple of 4)))

(:SetPointerMapping
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :Success)
		  (1 . :Busy)))
     status))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused}))

(:GetPointerMapping
 (1 {reply} 1)
 (1 (COUNT8 (length map)))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused})
 (nil ((list CARD8) map :as n))
 ((pad n) {unused}))

(:SetModifierMapping
 (1 {reply} 1)
 (1 ((ENUM CARD8 ((0 . :Success)
		  (1 . :Busy)
		  (2 . :Failed)))
     status))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused}))

(:GetModifierMapping
 (1 {reply} 1)
 (1 (COUNT8 keycodes-per-modifier))
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (24 {unused})
 (nil ((list KEYCODE) keycodes)))

(:BigReqEnable
 (1 {reply} 1)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 {extra-length})
 (4 (CARD32 maximum-request-length))
 (20 {unused}))

) ; interpret-replies

;; unused
(deftranslator/reply :FailedConnection
  (1 {Fail} 0) 
  (1 (COUNT8 (length reason))) 
  (2 (CARD16 protocol-major-version))
  (2 (CARD16 protocol-minor-version))
  (2 {conn-reply-length}) ; placeholder for length : (n+p)/4 length in 4-byte units of ``additional data'')
  (nil (STRING8 reason :as n))
  ((pad n) {unused}))

(deftranslator/reply :Connection
  (1 {Success} 1) 
  (1 {unused})
  (2 (CARD16 protocol-major-version))
  (2 (CARD16 protocol-minor-version))
  (2 {conn-reply-length}) ; placeholder for length : 8+2n+(v+p+m)/4 length in 4-byte units of ``additional data'')
  (4 (CARD32 release-number))
  (4 (CARD32 resource-id-base))
  (4 (CARD32 resource-id-mask))
  (4 (CARD32 motion-buffer-size))
  (2 (COUNT16 (length vendor)))
  (2 (CARD16 maximum-request-length))
  (1 (COUNT8 (length roots))) ;number of SCREENs in roots)
  (1 (COUNT8 (length pixmap-formats))) ; n number for FORMATs in pixmap-formats
  (1 ((ENUM CARD8 ((0 . :LSBFirst)
		   (1 . :MSBFirst)))
      image-byte-order))
  (1 ((ENUM CARD8 ((0 . :LeastSignificant)
		   (1 . :MostSignificant)))
      bitmap-format-bit-order))
  (1 (CARD8 bitmap-format-scanline-unit))
  (1 (CARD8 bitmap-format-scanline-pad))
  (1 (KEYCODE min-keycode))
  (1 (KEYCODE max-keycode))
  (4 {unused})
  (nil (STRING8 vendor :as v))
  ((pad v) {unused})
  (nil ((list FORMAT) pixmap-formats))
  (nil ((list SCREEN) roots))) ; (m is always a multiple of 4)
