;; (C) 2011 Pierre-Yves Baccou

;; Note : _all_ nils are :Nones.

(eval-when (:compile-toplevel :load-toplevel :execute)
;
(require "util" "util/util")
;
(enable-braces '(nil nil))
);

(defmacro interpret-events (&rest protos)
  (cons 'progn
	(mapcar #'(lambda (proto)
		    `(deftranslator/event ,(first proto) ,@(rest proto)))
		protos)))

(deftranslator/event :Error  ; errors can be seen as events here
 (1 {error} 0)
 (1 (CARD8 code))
 (2 (CARD16 sequence-number))
 (4 (CARD32 resource)) ; can be the bad id, the bad atom or the bad value
 (2 (CARD16 minor-opcode))
 (1 (CARD8 major-opcode))
 (21 {unused}))

(interpret-events
;
(:KeyPress
 (1 {code} 2)
 (1 (KEYCODE detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 (BOOL same-screen))
 (1 {unused}))

(:KeyRelease
 (1 {code} 3)
 (1 (KEYCODE detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 (BOOL same-screen))
 (1 {unused}))

(:ButtonPress
 (1 {code} 4)
 (1 (BUTTON detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 (BOOL same-screen))
 (1 {unused}))

(:ButtonRelease
 (1 {code} 5)
 (1 (BUTTON detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 (BOOL same-screen))
 (1 {unused}))

(:MotionNotify
 (1 {code} 6)
 (1 ((ENUM CARD8 ((0 . :Normal)
		  (1 . :Hint)))
     detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 (BOOL same-screen))
 (1 {unused}))

(:EnterNotify
 (1 {code} 7)
 (1 ((ENUM CARD8 ((0 . :Ancestor)
		  (1 . :Virtual)
		  (2 . :Inferior)
	     (3 . :Nonlinear)
	     (4 . :NonlinearVirtual)))
     detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 ((ENUM CARD8 ((0 . :Normal)
		  (1 . :Grab)
		  (2 . :Ungrab)))
     mode))
 (1 ((BITMASK CARD8 ((#x01 . :focus)
		     (#x02 . :same-screen)))
     same-screen/focus)))

(:LeaveNotify
 (1 {code} 8)
 (1 ((ENUM CARD8 ((0 . :Ancestor)
		  (1 . :Virtual)
		  (2 . :Inferior)
		  (3 . :Nonlinear)
		  (4 . :NonlinearVirtual)))
     detail))
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW root))
 (4 (WINDOW eventwin))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     child))
 (2 (INT16 root-x))
 (2 (INT16 root-y))
 (2 (INT16 event-x))
 (2 (INT16 event-y))
 (2 (#.SETofKEYMASK state))
 (1 ((ENUM CARD8 ((0 . :Normal)
		  (1 . :Grab)
		  (2 . :Ungrab)))
     mode))
 (1 ((BITMASK CARD8 ((#x01 . :focus)
		     (#x02 . :same-screen)))
     same-screen/focus)))

(:FocusIn
 (1 {code} 9)
 (1 ((ENUM CARD8 ((0 . :Ancestor)
		  (1 . :Virtual)
		  (2 . :Inferior)
		  (3 . :Nonlinear)
		  (4 . :NonlinearVirtual)
		  (5 . :Pointer)
		  (6 . :PointerRoot)
		  (7 . nil)))
     detail))
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (1 ((ENUM CARD8 ((0 . :Normal)
		  (1 . :Grab)
		  (2 . :Ungrab)
		  (3 . :WhileGrabbed)))
     mode))
 (23 {unused}))

(:FocusOut
 (1 {code} 10)
 (1 ((ENUM CARD8 ((0 . :Ancestor)
		  (1 . :Virtual)
		  (2 . :Inferior)
		  (3 . :Nonlinear)
		  (4 . :NonlinearVirtual)
		  (5 . :Pointer)
		  (6 . :PointerRoot)
		  (7 . nil)))
     detail))
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (1 ((ENUM CARD8 ((0 . :Normal)
		  (1 . :Grab)
		  (2 . :Ungrab)
		  (3 . :WhileGrabbed)))
     mode))
 (23 {unused}))

(:KeymapNotify
 (1 {code} 11)
 (31 (list CARD8) keys))  ; (byte for keycodes 0\-7 is omitted))

(:Expose
 (1 {code} 12)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (2 (CARD16 x))
 (2 (CARD16 y))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (2 (CARD16 count))
 (14 {unused}))

(:GraphicsExposure
 (1 {code} 13)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (DRAWABLE drawable))
 (2 (CARD16 x))
 (2 (CARD16 y))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (2 (CARD16 minor-opcode))
 (2 (CARD16 count))
 (1 (CARD8 major-opcode))
 (11 {unused}))

(:NoExposure
 (1 {code} 14)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (DRAWABLE drawable))
 (2 (CARD16 minor-opcode))
 (1 (CARD8 major-opcode))
 (21 {unused}))

(:VisibilityNotify
 (1 {code} 15)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (1 ((ENUM CARD8 ((0 . :Unobscured)
		  (1 . :PartiallyObscured)
		  (2 . :FullyObscured)))
     state))
 (23 {unused}))

(:CreateNotify
 (1 {code} 16)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW parent))
 (4 (WINDOW window))
 (2 (INT16 x))
 (2 (INT16 y))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (2 (CARD16 border-width))
 (1 (BOOL override-redirect))
 (9 {unused}))

(:DestroyNotify
 (1 {code} 17)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (20 {unused}))

(:UnmapNotify
 (1 {code} 18)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (1 (BOOL from-configure))
 (19 {unused}))

(:MapNotify
 (1 {code} 19)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (1 (BOOL override-redirect))
 (19 {unused}))

(:MapRequest
 (1 {code} 20)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW parent))
 (4 (WINDOW window))
 (20 {unused}))

(:ReparentNotify
 (1 {code} 21)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (4 (WINDOW parent))
 (2 (INT16 x))
 (2 (INT16 y))
 (1 (BOOL override-redirect))
 (11 {unused}))

(:ConfigureNotify
 (1 {code} 22)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     above-sibling))
 (2 (INT16 x))
 (2 (INT16 y))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (2 (CARD16 border-width))
 (1 (BOOL override-redirect))
 (5 {unused}))

(:ConfigureRequest
 (1 {code} 23)
 (1 ((ENUM CARD8 ((0 . :Above)
		  (1 . :Below)
		  (2 . :TopIf)
		  (3 . :BottomIf)
		  (4 . :Opposite)))
     stack-mode))
 (2 (CARD16 sequence-number))
 (4 (WINDOW parent))
 (4 (WINDOW window))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 WINDOW)
     sibling))
 (2 (INT16 x))
 (2 (INT16 y))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (2 (CARD16 border-width))
 (2 ((BITMASK CARD16 ((#x0001 . :x)
		      (#x0002 . :y)
		      (#x0004 . :width)
		      (#x0008 . :height)
		      (#x0010 . :border-width)
		      (#x0020 . :sibling)
		      (#x0040 . :stack-mode)))
     value-mask))
 (4 {unused}))

(:GravityNotify
 (1 {code} 24)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (2 (INT16 x))
 (2 (INT16 y))
 (16 {unused}))

(:ResizeRequest
 (1 {code} 25)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (2 (CARD16 width))
 (2 (CARD16 height))
 (20 {unused}))

(:CirculateNotify
 (1 {code} 26)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW eventwin))
 (4 (WINDOW window))
 (4 {unused})
 (1 ((ENUM CARD8 ((0 . :Top)
		  (1 . :Bottom)))
     place))
 (15 {unused}))

(:CirculateRequest
 (1 {code} 27)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW parent))
 (4 (WINDOW window))
 (4 {unused})
 (1 ((ENUM CARD8 ((0 . :Top)
		  (1 . :Bottom)))
     place))
 (15 {unused}))

(:PropertyNotify
 (1 {code} 28)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (4 (ATOM atom))
 (4 (TIMESTAMP time))
 (1 ((ENUM CARD8 ((0 . :NewValue)
		  (1 . :Deleted)))
     state))
 (15 {unused}))

(:SelectionClear
 (1 {code} 29)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (TIMESTAMP time))
 (4 (WINDOW owner))
 (4 (ATOM selection))
 (16 {unused}))

(:SelectionRequest
 (1 {code} 30)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 ((or (ENUM CARD32 ((0 . :CurrentTime)))
	 TIMESTAMP)
     time))
 (4 (WINDOW owner))
 (4 (WINDOW requestor))
 (4 (ATOM selection))
 (4 (ATOM target))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 ATOM)
     property))
 (4 {unused}))

(:SelectionNotify
 (1 {code} 31)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 ((or (ENUM CARD32 ((0 . :CurrentTime)))
	 TIMESTAMP)
     time))
 (4 (WINDOW requestor))
 (4 (ATOM selection))
 (4 (ATOM target))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 ATOM)
     property))
 (8 {unused}))

(:ColormapNotify
 (1 {code} 32)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (4 ((or (ENUM CARD32 ((0 . nil)))
	 COLORMAP)
     colormap))
 (1 (BOOL new))
 (1 ((ENUM CARD32 ((0 . :Uninstalled)
		   (1 . :Installed)))
     state))
 (18 {unused}))

(:ClientMessage
 (1 {code} 33)
 (1 (CARD8 format))
 (2 (CARD16 sequence-number))
 (4 (WINDOW window))
 (4 (ATOM type))
 (20 (VECTOR data))) ; todo : get this right (and all the SendEvent stuff)

(:MappingNotify
 (1 {code} 34)
 (1 {unused})
 (2 (CARD16 sequence-number))
 (1 ((ENUM CARD8 ((0 . :Modifier)
		  (1 . :Keyboard)
	     (2 . :Pointer)))
     request))
 (1 (KEYCODE first-keycode))
 (1 (CARD8 count))
 (25 {unused}))
;
) ; interpret-events

;; Do I need to convert this ?
#|
(define-constant +event-opcodes+
  (mapcar #'(lambda (ev-spec)
	      (bind (name (l sym codeval) . rest)
		  ev-spec
		(list name codeval)))
	  +event-specs+))
|#
