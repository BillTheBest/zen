(define-constant +event-bits+
 '((#x00000001 . :KeyPress)
   (#x00000002 . :KeyRelease)
   (#x00000004 . :ButtonPress)
   (#x00000008 . :ButtonRelease)
   (#x00000010 . :EnterWindow)
   (#x00000020 . :LeaveWindow)
   (#x00000040 . :PointerMotion)
   (#x00000080 . :PointerMotionHint)
   (#x00000100 . :Button1Motion)
   (#x00000200 . :Button2Motion)
   (#x00000400 . :Button3Motion)
   (#x00000800 . :Button4Motion)
   (#x00001000 . :Button5Motion)
   (#x00002000 . :ButtonMotion)
   (#x00004000 . :KeymapState)
   (#x00008000 . :Exposure)
   (#x00010000 . :VisibilityChange)
   (#x00020000 . :StructureNotify)
   (#x00040000 . :ResizeRedirect)
   (#x00080000 . :SubstructureNotify)
   (#x00100000 . :SubstructureRedirect)
   (#x00200000 . :FocusChange)
   (#x00400000 . :PropertyChange)
   (#x00800000 . :ColormapChange)
   (#x01000000 . :OwnerGrabButton)))

(define-constant +keybutmask-bits+
    '((#x0001 . :Shift)
      (#x0002 . :Lock)
      (#x0004 . :Control)
      (#x0008 . :Mod1)
      (#x0010 . :Mod2)
      (#x0020 . :Mod3)
      (#x0040 . :Mod4)
      (#x0080 . :Mod5)
      (#x0100 . :Button1)
      (#x0200 . :Button2)
      (#x0400 . :Button3)
      (#x0800 . :Button4)
      (#x1000 . :Button5)
      (#x8000 . :AnyModifier)))

(define-constant SETofEVENT
    `(BITMASK CARD32 ,+event-bits+))

(define-constant SETofDEVICEEVENT
    `(BITMASK CARD16 ,+event-bits+)) ; smaller mask fits in 2 bytes

(define-constant SETofPOINTEREVENT
    `(BITMASK CARD16 ,+event-bits+)) ; smaller mask fits in 2 bytes

(define-constant SETofKEYMASK
    `(BITMASK CARD16 ,+keybutmask-bits+)) ; smaller mask fits in 2 bytes

(define-constant +createwindow-mask-values+
    `((#x00000001 . ((or (ENUM CARD32 ((0 . nil)
				       (1 . :ParentRelative)))
			 PIXMAP)
		     background-pixmap))
      (#x00000002 . (CARD32 background-pixel))
      (#x00000004 . ((or (ENUM CARD32 ((0 . :CopyFromParent)))
			 PIXMAP)
		     border-pixmap))
      (#x00000008 . (CARD32 border-pixel))
      (#x00000010 . ((ENUM CARD8 ((0 . :Forget)
				  (1 . :NorthWest)
				  (2 . :North)
				  (3 . :NorthEast)
				  (4 . :West)
				  (5 . :Center)
				  (6 . :East)
				  (7 . :SouthWest)
				  (8 . :South)
				  (9 . :SouthEast)
				  (10 . :Static)))
		     bit-gravity))
      (#x00000020 . ((ENUM CARD8 ((0 . :Unmap)
				  (1 . :NorthWest)
				  (2 . :North)
				  (3 . :NorthEast)
				  (4 . :West)
				  (5 . :Center)
				  (6 . :East)
				  (7 . :SouthWest)
				  (8 . :South)
				  (9 . :SouthEast)
				  (10 . :Static)))
		     win-gravity))
      (#x00000040 . ((ENUM CARD8 ((0 . :NotUseful)
				  (1 . :WhenMapped)
				  (2 . :Always)))
		     backing-store))
      (#x00000080 . (CARD32 backing-planes))
      (#x00000100 . (CARD32 backing-pixel))
      (#x00000200 . (BOOL/4 override-redirect))
      (#x00000400 . (BOOL/4 save-under))
      (#x00000800 . (,SETofEVENT event-mask))
      (#x00001000 . (,SETofDEVICEEVENT do-not-propagate-mask))
      (#x00002000 . ((or (ENUM CARD32 ((0 . :CopyFromParent)))
			 COLORMAP)
		     colormap))
      (#x00004000 . ((or (ENUM CARD32 ((0 . nil)))
			 CURSOR)
		     cursor))))

(define-constant +createGC-mask-values+
    '((#x00000001 . ((ENUM CARD8/4 ((0 . :Clear)
				    (1 . :And)
				    (2 . :AndReverse)
				    (3 . :Copy)
				    (4 . :AndInverted)
				    (5 . :NoOp)
				    (6 . :Xor)
				    (7 . :Or)
				    (8 . :Nor)
				    (9 . :Equiv)
				    (10 . :Invert)
				    (11 . :OrReverse)
				    (12 . :CopyInverted)
				    (13 . :OrInverted)
				    (14 . :Nand)
				    (15 . :Set)))
		     function))
      (#x00000002 . (CARD32 plane-mask))
      (#x00000004 . (CARD32 foreground))
      (#x00000008 . (CARD32 background))
      (#x00000010 . (CARD16/4 line-width))
      (#x00000020 . ((ENUM CARD8/4 ((0 . :Solid)
				    (1 . :OnOffDash)
				    (2 . :DoubleDash)))
		     line-style))
      (#x00000040 . ((ENUM CARD8/4 ((0 . :NotLast)
				    (1 . :Butt)
				    (2 . :Round)
				    (3 . :Projecting)))
		     cap-style))
      (#x00000080 . ((ENUM CARD8/4 ((0 . :Miter)
				    (1 . :Round)
				    (2 . :Bevel)))
		     join-style))
      (#x00000100 . ((ENUM CARD8/4 ((0 . :Solid)
				    (1 . :Tiled)
				    (2 . :Stippled)
				    (3 . :OpaqueStippled)))
		     fill-style))
      (#x00000200 . ((ENUM CARD8/4 ((0 . :EvenOdd)
				    (1 . :Winding)))
		     fill-rule))
      (#x00000400 . (PIXMAP tile))
      (#x00000800 . (PIXMAP stipple))
      (#x00001000 . (INT16/4 tile-stipple-x-origin))
      (#x00002000 . (INT16/4 tile-stipple-y-origin))
      (#x00004000 . (FONT font))
      (#x00008000 . ((ENUM CARD8/4 ((0 . :ClipByChildren)
				    (1 . :IncludeInferiors)))
		     subwindow-mode))
      (#x00010000 . (BOOL/4 graphics-exposures))
      (#x00020000 . (INT16/4 clip-x-origin))
      (#x00040000 . (INT16/4 clip-y-origin))
      (#x00080000 . ((or (ENUM CARD32 ((0 . nil)))
			 PIXMAP)
		     clip-mask))
      (#x00100000 . (CARD16/4 dash-offset))
      (#x00200000 . (CARD8/4 dashes))
      (#x00400000 . ((ENUM CARD8/4 ((0 . :Chord)
				    (1 . :PieSlice)))
		     arc-mode))))

(define-constant +copyGC-mask-values+
    (mapcar #'(lambda (item)
		(bind (mask . (fn var))
		    item
		  (cons mask var)))
	    +createGC-mask-values+))
